{"data":{"site":{"siteMetadata":{"title":"Bruno Luiz Blog","author":"Bruno Luiz Silva"}},"markdownRemark":{"id":"7f3c56d8-3f2d-55de-aaa5-df184875e5e9","excerpt":"\n \non\n Unsplash If you are not new in the JavaScript world, you might have already heard about\n npm . It is a package manager that let developers\neasily add…","html":"<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*1ZUHGaIEmhSG0Yk6AvXSAw.jpeg\" alt=\"Photo by Paul Esch-Laurent\">\n<span class=\"figcaption_hack\">\non\n<a href=\"https://unsplash.com/search/photos/npm?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></span></p>\n<p>If you are not new in the JavaScript world, you might have already heard about\n<a href=\"https://www.npmjs.com/\">npm</a>. It is a package manager that let developers\neasily add packages to a project, as <code>npm install hello-world</code> . But, have you\never asked “How do I create and publish my own packages”?</p>\n<h2>How a package is composed?</h2>\n<p>Packages are quite simple in JavaScript. A <code>package.json</code> and <code>index.js</code> can\nalready do the job. Look at this micro package called <code>dedupe</code> for example:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*1QcDFQmZevRgKVCBN5nvZQ.png\"></p>\n<p>There are other useful files such as <code>.gitignore</code> and <code>.npmignore</code>, <code>LICENSE</code>\nand <code>README.md</code>, but the main ones are there: <code>package.json</code> and <code>index.js</code> .\nHaving these, the package just need to be published in a repository, such as the\n<a href=\"https://www.npmjs.com/\">npm public</a>. Through this guide, you will be able to\nhave a simple package created and published on npm.</p>\n<h2>Create a npm package</h2>\n<p>While doing <a href=\"https://apimock.in\">apimock.in</a>, I had to create multiple\nserverless stacks. Each have error handlers and, as most of the errors are quite\nthe same, one strategy is to extract these definitions into a package and just\ninstall it on each serverless stack. I will use this case as the example through\nthis post.</p>\n<h3>Create a npmjs.com account</h3>\n<p>Before doing anything, an account on <a href=\"https://npmjs.com\">npmjs.com</a> is required\nfor publishing a package. This is the website for the npm public repository, the\none which is used when  <code>npm install ...</code> is executed.</p>\n<p>To create an account, go to <a href=\"https://www.npmjs.com/signup\">npm signup page</a> and\nfill up the informations. After finishing the process, a test can be done using\n<code>npm login</code> and <code>npm whoami</code>. Has it output your username? Great! It is working!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*sUm176ELamVqjUF1GUpiVw.gif\"></p>\n<h3>Some words about scopes</h3>\n<p>Scopes are useful in many ways, although not strictly required to publish a npm\npackage. Every npm user has its own scope, defined as the npm user name.</p>\n<p>As only the developer/company can publish to its own scope, it is quite useful\nto indicate it is an official package. For example, one can publish a package\ncalled <code>xyz-sdk</code>, but another called <code>xyz</code> might already exist. How one would\nnow which to install? What if <code>xyz</code> mimics <code>xyz-sdk</code>, but with malicious code? </p>\n<blockquote>\n<p>Each npm user/organisation has their own scope, and only you can add packages in\nyour scope. This means you don’t have to worry about someone taking your package\nname ahead of you. Thus it is also a good way to signal official packages for\norganisations. (f<a href=\"https://docs.npmjs.com/misc/scope\">rom npm-scopes\ndocumentation</a>)</p>\n</blockquote>\n<p>A scoped package would have  a <code>@account</code> prefix. It would be published as\n<code>@account/xyz-sdk</code>, hence easily identifiable as from a specific developer.\nBesides, the developer don’t have to worry about name clashing, as the scope is\naccount specific. It can be configured to point to a private repository as well,\nmaking it specially useful for companies.</p>\n<p>There are <a href=\"https://docs.npmjs.com/misc/scope\">more information about scopes\nhere</a>. Keep in mind it is a good practice to\nscope packages.</p>\n<h3>Create a simple package structure</h3>\n<p>In an empty folder, run <code>npm init —-scope=@your-npm-user</code>. This will setup a\n<code>package.json</code> and ask for some informations, such as name, version, main entry\nfile and author. The end result will be something as the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n  &quot;name&quot;: &quot;\n&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;description&quot;: &quot;JSONAPI Common Errors&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;jest&quot;\n  },\n  &quot;author&quot;: &quot;Bruno Luiz da Silva &lt;\n&gt; (\n)&quot;,\n  &quot;license&quot;: &quot;MIT&quot;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>After having it initialised, is time to code something. Develop a basic\nimplementation of it in the specified main file on <code>npm init</code> setup (usually\n<code>index.js</code>). If the package require dependencies or there are files to be\nignored on publishing, add a <code>.gitignore</code> with what should be ignored (eg:\nnode_modules).</p>\n<p>It is suggested to add a <code>LICENSE.md</code> and a <code>README.md</code>, as other developers\nmight use this package. For more informations about licensing, check\n<a href=\"https://choosealicense.com/\">choosealicense.com</a>.</p>\n<h3>Publish the package</h3>\n<p>The basic implementation is done and now is time to deploy it! For the first\npublish, a <code>npm publish -—access=public</code> is required. The <code>access=public</code> param\nis needed as, by default, it tries to do it as private. On following\npublishings, a <code>npm publish</code> will do the job.</p>\n<p>Congratulations! You published your first package on npm. It should be available\nat <code>https://npmjs.com/package/@your-npm-user/package-name</code> and ready to be\ninstalled through <code>npm install @your-npm-user/package-name</code>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*oltzIY-eP8kDiK7mIlUVIQ.gif\"></p>\n<h3>Releasing new versions</h3>\n<p>After some iterations, the package might need new features. In the example\nabove, <code>jsonapi-errors</code> only have a <code>index.js</code> which prints a “hello world”\n(quite useless). After adding a real implementation, a version bump is required.</p>\n<p>NPM packages uses semantic versioning. The is <a href=\"https://semver.org/\">more information about it\nhere</a>, but in a nutshell:</p>\n<blockquote>\n<ul>\n<li>MAJOR version when you make incompatible API changes,</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>MINOR version when you add functionality in a backwards-compatible manner, and</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>PATCH version when you make backwards-compatible bug fixes.</li>\n</ul>\n</blockquote>\n<p>In the <code>jsonapi-errors</code> example, a minor version increment is required. To do\nthis, a <code>npm version minor</code> can be used, where it will bump the <code>package.json</code>\nversion and add a git commit + tag. Then, a <code>npm publish</code> will take care of\npushing it (no need for <code>access</code> parameter now).</p>\n<p>There are <a href=\"https://docs.npmjs.com/cli/version.html\">more information about the versioning process\nhere</a>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*gg3mGMbiQMFB7FKQQi8NzQ.gif\"></p>\n<h3>Testing on projects and going beyond npm install</h3>\n<p>A simple way to test the shinny new package is through <code>npm install</code>. It will\nwork as expected but, if a change is required, a new version has to be published\nand the project dependency has to be upgraded to use the new one.</p>\n<p>This is unproductive, specially when a package is new and changes happen quite\noften. A way to solve it is through <code>npm link</code>: it creates a symbolic link of\nthe package, inside the project <code>node_modules</code> folder, where it will use the\nlocal version of the module.</p>\n<p>&#x3C; … to be developed … ></p>\n<h2>Automate publishing process using CircleCI</h2>\n<p>If a package have many people collaborating to it, or the deploy process require\nmany extra steps besides publishing it, perhaps an automated setup can improve\nthe workflow. I prefer to use CircleCI, but there are other options such as\nTravisCI and GitLab CI.</p>\n<p>On CircleCI Blog there is a <a href=\"https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/\">complete article explaining how to do\nit</a>. The\nfinal configuration will enable to:</p>\n<ol>\n<li>On feature branches, it will just run tests (eg: run tests on pull requests)</li>\n<li>On git <code>v*.*.*</code> tag pushes, it will run tests and then publish to the NPM\nrepository  —  remembering, a git version tag is generated by <code>npm version</code> </li>\n</ol>\n<p>More configurations can be added, such as saving coverage reports to a bucket or\ntriggering specific web hooks after the jobs (eg: Slack).</p>\n<h2>Where to go now?</h2>\n<p>The steps shown in this article will cover most basic necessities on npm package\npublishing, but there are some specifics I haven’t covered in this article.</p>\n<ol>\n<li><strong>Publish the package as TypeScript:</strong> this allows code typing, more robust\ncodes and, in editors such as VS Code, it enables a batter IntelliSense. <a href=\"https://itnext.io/step-by-step-building-and-publishing-an-npm-typescript-package-44fe7164964c\">There\nis a quite complete article on\nITNext</a>.</li>\n<li><strong>Publish it to a private repository:</strong> there are some small different\nconfigurations, as pointing the package scope to the private repository. <a href=\"https://docs.npmjs.com/creating-and-publishing-private-packages\">Give a\nlook in this npm\narticle</a>.</li>\n</ol>","frontmatter":{"title":"A guide on npm package publishing","date":"February 11, 2019"}}},"pageContext":{"slug":"/2019/feb/a-guide-to-npm-package-publishing/","previous":{"fields":{"slug":"/2018/mar/a-tale-of-how-to-not-deploy-two-months-old-features/"},"frontmatter":{"title":"A Tale Of How To Not Deploy Two Months Old Features"}},"next":null}}